[
  {
    "course_code": "CS 1080",
    "section": "Section A, CRN 10662",
    "title": "Intro to Web Site Dev",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Murat Gungor",
    "description": "Provides a strong foundation in HTML, CSS, images, beginning web programming, and web design so that the student can create a complete functional web site in a team based final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 1210",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 1320",
    "section": "Section A, CRN 13991",
    "title": "Puzzles, Games & Algorithms",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Lisa Dion",
    "description": "Introductory computer science through exploration and analysis of mathematical puzzles and games, and the algorithms that handle them. Prerequisite: No credit if taken after CS 2100.",
    "section_description": "In this course, you will explore computational thinking through the analysis of mathematical puzzles and games, and the algorithms that handle them. Learning objectives include:\n- To engage in productive struggle and data collection to solve common puzzles and understand common mathematical games through computational thinking\n- To understand, appreciate, and communicate various approaches and algorithms to solving the games and puzzles\n- To connect the puzzles and games to real-world applications and transfer the knowledge and understanding to help shape real-world decisions and actions",
    "section_expectations": "This course is taught in an active learning style, so class attendance will be crucial. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "This course is taught using a points-based system. Each week a few assignments will be released, with varying formats and point values. Your final grade will be based on the number of points you accumulate by the end of the semester.",
    "soc_comments": "Open to Degree and PACE students;\nNo credit if taken after CS 2100",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 1320",
    "section": "Section A, CRN 13991",
    "title": "Puzzles, Games & Algorithms",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Lisa Dion",
    "description": "Introductory computer science through exploration and analysis of mathematical puzzles and games, and the algorithms that handle them. Prerequisite: No credit if taken after CS 2100.",
    "section_description": "In this course, you will explore computational thinking through the analysis of mathematical puzzles and games, and the algorithms that handle them. Learning objectives include:\n- To engage in productive struggle and data collection to solve common puzzles and understand common mathematical games through computational thinking\n- To understand, appreciate, and communicate various approaches and algorithms to solving the games and puzzles\n- To connect the puzzles and games to real-world applications and transfer the knowledge and understanding to help shape real-world decisions and actions",
    "section_expectations": "This course is taught in an active learning style, so class attendance will be crucial. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "This course is taught using a points-based system. Each week a few assignments will be released, with varying formats and point values. Your final grade will be based on the number of points you accumulate by the end of the semester.",
    "soc_comments": "Open to Degree and PACE students;\nNo credit if taken after CS 2100",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 1320",
    "section": "Section A, CRN 13991",
    "title": "Puzzles, Games & Algorithms",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Lisa Dion",
    "description": "Introductory computer science through exploration and analysis of mathematical puzzles and games, and the algorithms that handle them. Prerequisite: No credit if taken after CS 2100.",
    "section_description": "In this course, you will explore computational thinking through the analysis of mathematical puzzles and games, and the algorithms that handle them. Learning objectives include:\n- To engage in productive struggle and data collection to solve common puzzles and understand common mathematical games through computational thinking\n- To understand, appreciate, and communicate various approaches and algorithms to solving the games and puzzles\n- To connect the puzzles and games to real-world applications and transfer the knowledge and understanding to help shape real-world decisions and actions",
    "section_expectations": "This course is taught in an active learning style, so class attendance will be crucial. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "This course is taught using a points-based system. Each week a few assignments will be released, with varying formats and point values. Your final grade will be based on the number of points you accumulate by the end of the semester.",
    "soc_comments": "Open to Degree and PACE students;\nNo credit if taken after CS 2100",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 1994",
    "title": "Teaching Assistantship",
    "credit_hours": "1 to 3",
    "description": "Assist in instruction of undergraduate computer science courses under the direct supervision of a faculty member. Instructor permission required.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2100",
    "title": "Intermediate Programming",
    "credit_hours": "4",
    "instructor": "Jackie Horton",
    "description": "Intermediate programming concepts including common data structures, algorithms, style, design, documentation, testing and debugging techniques, and an introduction to object-oriented programming. Prerequisite: CS 1210 with a grade of C- or better.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2210",
    "title": "Computer Organization",
    "credit_hours": "3",
    "instructor": "James Eddy",
    "description": "Introduction to computer system organization including performance, assembly language, machine-level data representation, arithmetic for computers, processor datapath control, memory, and input/output. Includes significant semester project. Cross-listed with: CMPE 2210. Prerequisite: CS 2100.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2240",
    "title": "Data Struc & Algorithms",
    "credit_hours": "3",
    "description": "Design and implementation of linear structures, trees and graphs. Examples of common algorithmic paradigms. Theoretical and empirical complexity analysis. Sorting, searching, and basic graph algorithms. Prerequisites: CS 2100 with a grade of C- or better; minimum Sophomore standing.",
    "section_description": "You will learn the common data structures for abstract data types and algorithms, including lists, trees, heaps, sorting, hashing, and disjoint set finding/uniting. You will also consider and compare their performances.\nCourse goals and objectives:\n1) You will gain knowledge of different data structures and recognize the use cases for each.\n2) You will consider not just whether algorithms function correctly or not, but also their efficiency and performance as the amount of data grows.\n3) You will use the C++ programming language to collect data with and analyze data structures and algorithms.",
    "section_expectations": "This class is run lecture-style with practice problems and active learning activities sprinkled throughout. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "Your final grade will be based on quizzes, programming projects, active learning activities, surveys, and a final exam.",
    "soc_comments": "Prereqs enforced by the system: C- or better in CS 2100;\nMinimum sophomore standing;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2250",
    "title": "Computability& Complexity",
    "credit_hours": "3",
    "description": "Formal languages and expressiveness. Turing completeness and Church's Thesis. Decidability and tractability. Complexity classes and theory of NP completeness. Prerequisites: CS 1640 or MATH 2055. Co-requisite: CS 2240.",
    "soc_comments": "Prereqs enforced by the system: CS 1640 or MATH 2055;\nCoreq: CS 2240;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2300",
    "title": "Advanced Programming",
    "credit_hours": "3",
    "instructor": "Lisa Dion",
    "description": "Builds programming maturity and proficiency through significant projects with spiral development, including program specification, design, implementation, debugging, testing, validation, internal and external documentation. Focus on advanced topics including efficiency, profiling, modularity, extensibility, programming paradigms, design patterns, memory management, and generics. Prerequisite: CS 2240.",
    "section_description": "You will learn the details of C++ through a mixture of guided and open-ended projects, oral/written assignments, and other activities. An emphasis will be put on creativity and collaboration.\n\nCourse goals and objectives include:\n1) To master C++ programming.\n2) To expand programming knowledge to multiple languages.\n3) To explore event-based programming through C++ graphics projects.\n4) To develop the skills necessary to effectively collaborate in teams.",
    "section_expectations": "Every three-week module will be themed and will have lectures, active learning activities, and assignments associated with it. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "This course uses a point-based grading system, where you get to choose which assignments you want to complete to earn points towards your final grade.",
    "soc_comments": "Prereqs enforced by the system: CS 2240;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2500",
    "section": "Section A, CRN 14098",
    "title": "Intro to Database Systems",
    "credit_hours": "3",
    "meeting_info": "MW 3:30pm-4:45pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jackie Horton",
    "description": "Serves as a foundational course in modern database systems. Introduces the fundamental concepts and techniques of relational database management, data modeling, relational algebra, structured query language, database design and database management.  Practical experience will be gained through a series of labs and projects. Credit not awarded after CS 3040 or CS 5040. Prerequisites: CS 1210; minimum Sophomore standing. Pre/Co-requisites: CS 1210; minimum Sophomore standing.",
    "soc_comments": "Prereq enforced by the system: CS 1210",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2510",
    "title": "Intro Artificial Intelligence",
    "credit_hours": "3",
    "instructor": "Clayton Cafiero",
    "description": "An introduction to artificial intelligence including logic and rule-based approaches, heuristic search, A*, IDA*, minimax, alpha/beta pruning, expectiminimax, Markov models and MDPs, decision tree, ensemble learning / random forest, the neural model and simple multi-layer perceptrons. Other topics, if any may vary. Prerequisite: C- or better in CS 2240.",
    "soc_comments": "Prereqs enforced by the system: CS 2240",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2660",
    "section": "Section OL1, CRN 13197",
    "title": "Cybersecurity Principles",
    "credit_hours": "3",
    "instructor": "James Eddy",
    "description": "Introduction to cybersecurity, fundamental security design principles, programming flaws, malicious code, web and database security, cryptography algorithms and hashing functions; overview of computer networks and common network threat vectors. Prerequisites: CS 2210 with a grade of C- or better.",
    "soc_comments": "Prereqs enforced by the system: CS 2210 with a\ngrade of C- ;\nAsynchronous Online Course;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2920",
    "section": "Section A, CRN 12182",
    "title": "SL:Girls Who Code",
    "credit_hours": "1",
    "instructor": "Lisa Dion",
    "description": "Service learning experience that benefits the University or the Community under the direction of a CS faculty member. Prerequisite: Instructor permission.",
    "section_description": "This is for students who help facilitate the UVM Girls Who Code club on Saturday mornings. We teach local K-12 girls the basics in programming.",
    "section_expectations": "You will be expected to attend the club every Saturday, participate in reflections and planning before and after each session, and lead the session a few times during the semester.",
    "evaluation": "You will be evaluated based on attendance, completion of tasks, being a good role model for the girls, lesson planning, and leadership.",
    "soc_comments": "Instructor permission required;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 2994",
    "title": "Teaching Assistantship",
    "credit_hours": "Varies by section",
    "description": "Undergraduate student service as a teaching assistant, usually in an introductory-level course in the discipline, for which credit is awarded. Offered at department discretion.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3010",
    "section": "Section A, CRN 12081",
    "title": "Operating Systems",
    "credit_hours": "3",
    "meeting_info": "MWF 2:20pm-3:10pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jason Hibbeler",
    "description": "Supervisory and control software for multiprogrammed computer systems. Processes, threads, synchronization, interprocess communication, scheduling, memory management, resource allocation, performance evaluation, secondary storage, case studies. Prerequisites: CS 2300 and CS 2210.",
    "section_description": "CS 3010 will provide a broad overview of operating systems, focused primarily on Linux.  We will pursue an in-depth investigation of the following topics: the OS kernel and kernel mode; concurrency and threads; synchronization and deadlock;, scheduling algorithms; virtual-memory management; I/O devices; and file-system management.\n\nFrom this course, students will become proficient in developing system-level programs in C.\n\nThe recommended text will be Operating System Concepts: Principles and Practice, 2nd Edition, by Anderson and Dahlin.",
    "section_expectations": "Students will learn concepts by creating several C programs on Linux that apply the various concepts from class.  There will be a midterm exam and a final exam; several short Brightspace quizzes covering concepts from the lectures; and in-class practice worksheets.",
    "evaluation": "Course grades will be based on the midterm and final exams; the programming projects; the Brightspace quizzes covering concepts from the lectures; and attendance.",
    "soc_comments": "Prereqs enforced by the system: CS 2300 & CS 2210;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3050",
    "section": "Section A, CRN 11825",
    "title": "Software Engineering",
    "credit_hours": "3",
    "meeting_info": "MWF 3:30pm-4:20pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jason Hibbeler",
    "description": "Treatment of software engineering problems and principles, with a focus on iterative software development. A significant part of the course is devoted to two multi-week team projects. Prerequisite: CS 2300.",
    "section_description": "CS 3050 will present a broad overview of the many activities involved in software engineering.  In particular, we will devote particular attention requirements engineering and to iterative software development.  We will also cover additional topics including design and implementation, verification, evolution, and software maintenance.  Students will learn and make use of automated frameworks for analyzing, testing, and documenting source code.\n\nStudents will acquire the skills needed to work constructively in an agile framework (Kanban, Scrum) on a large-scale team project and will learn to use git effectively.\n\nThe recommended text is Essentials of Software Engineering, by Tsui, Karam, and Bernal (ISBN 1284106004).",
    "section_expectations": "There will be three individual in-class coding challenges in Python, a short team programming project, and large team programming project that will span approximately half the semester.  There will be two exams.  Students must be able to work effectively as part of a team.",
    "evaluation": "Course grades will be based on in-class coding challenges, on the exams, and on the two team projects.  The team projects will count for a significant portion of the course grade.  In addition, students will present material in writing and orally in class, and these presentations will count towards the course grade.  Students will also be evaluated on their ability to work as part of the team.  Class attendance will also count towards the course grade.",
    "soc_comments": "Prereqs enforced by the system: CS 2300;\nProject presentation session: Feb 12th, 6-9 PM;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3060",
    "section": "Section A, CRN 10577",
    "title": "Evolutionary Robotics",
    "credit_hours": "3",
    "meeting_info": "TTh 8:30am-9:45am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Joshua Bongard",
    "description": "Exploration of the automated design of autonomous machines using evolutionary algorithms. Coursework involves reading of research papers, programming assignments and a final project. Credit not awarded for both CS 3060 and CS 5060. Prerequisites: Junior standing and programming experience, or Instructor permission.",
    "soc_comments": "Prereq: Junior standing and programming experience\nor instructor permission; Co-located with CS 5060 A;\nTotal combined enrollment: 60;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3120",
    "section": "Section A, CRN 15536",
    "title": "Secure Distributed Computation",
    "credit_hours": "3",
    "meeting_info": "MWF 10:50am-11:40am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Joe Near",
    "description": "Techniques for secure computation involving multiple distributed parties, including applied cryptography, homomorphic encryption, secure multiparty computation, and zero-knowledge proof. Applications including Bitcoin and other blockchain systems, encrypted databases, federated learning, and computing on encrypted data. Credit not awarded for both CS 3120 and CS 5120. Prerequisites: CS 2240, CS 2250.",
    "section_description": "Techniques for secure computation involving multiple distributed parties, including applied cryptography, homomorphic encryption, secure multiparty computation, verified computation, and zero-knowledge proof. Applications including Bitcoin and other blockchain systems, Ethereum and other smart contracts, encrypted databases, federated learning, and computing on encrypted data.\n\nThis is a programming-based course, with minimal theory background required. Programming projects may include:\n\n - Building an encrypted database that runs queries over encrypted data without decrypting it\n - Building a distributed protocol that computes the average salary among several parties, without revealing any individual's salary\n - Building a decentralized cryptocurrency, using techniques from blockchain research\n - Building a decentralized smart contract system\n - Building a system for distributed machine learning that trains a model without inspecting user data, using federated learning techniques",
    "section_expectations": "By the end of this course, you will be able to:\n\n    Describe the common goals of secure computation techniques\n    Define and apply the following concepts:\n        Secure multiparty computation\n        Homomorphic encryption\n        Zero-knowledge proof\n        Distributed ledger\n        Blockchain\n    Build systems that compute on encrypted data\n    Implement protocols for zero-knowledge proof\n    Evaluate the communications cost of a distributed protocol\n    Argue for the security of a distributed protocol",
    "evaluation": "Your grade for the course will be determined as follows:\n\n    11 homework assignments (5% each; 55% total)\n    in-class exercises (25% total)\n    midterm exam (5%)\n    final exam (5%)\n    final project (10%)",
    "soc_comments": "Prereqs enforced by the system: CS 2240 and CS 2250;\nCo-located with CS 5120;\nTotal combined enrollment: 40",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3220",
    "section": "Section A, CRN 10129",
    "title": "Computer Architecture",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jason Hibbeler",
    "description": "Architecture of computing systems. Control unit logic, input/output processors and devices, asynchronous processing, concurrency, parallelism, and memory hierarchies. Credit not awarded for both CS 3220 and CS 5220. Cross-listed with: CMPE 3220. Prerequisite: CMPE 2210 or CS 2210.",
    "section_description": "CS 3220 will provide a thorough and sophisticated examination of various hardware aspects of modern computers, including: virtual memory; instruction-set architectures; instruction-level parallelism through pipelining; caches and cache coherence; threads; vector processors; GPUs and the CUDA platform; and quantum computing if time allows.",
    "section_expectations": "Students will do written exercises; create software programs  that explore different areas of computer hardware; write short assembly-language programs; and write CUDA programs to learn and apply concepts of GPU-based software development.  Students will have the option of using a system in the Deep Green Cluster of the Vermont Advanced Computing Core for the GPU-based development.",
    "evaluation": "Student grades will be based on the exams, the written assignments, the programming projects, and attendance.",
    "soc_comments": "Prereqs enforced by the system: CS 2210 or CMPE 2210;\nOpen to Degree and PACE students;\nCross-listed with CMPE 3220 A; Co-located with CS 5220 A\nand CMPE 5220A;\nTotal combined enrollment: 40",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3240",
    "title": "Algorithm Design & Analysis",
    "credit_hours": "3",
    "description": "Comprehensive study of algorithms including greedy algorithms, divide and conquer, dynamic programming, graph algorithms and network flow. Computational intractability. Approximation, local search and randomization. Credit not awarded for both CS 3240 and CS 5240. Prerequisite: CS 2240. Pre/co-requisites: Recommended: CS 2250; STAT 2430, or STAT 2510.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3540",
    "section": "Section A, CRN 12532",
    "title": "Machine Learning",
    "credit_hours": "3",
    "meeting_info": "MWF 8:30am-9:20am UNASSIGNED (1/12 to 5/1)",
    "instructor": ". Staff",
    "description": "Introduction to machine learning algorithms, theory, and implementation, including supervised and unsupervised learning; topics typically include linear and logistic regression, learning theory, support vector machines, decision trees, backpropagation artificial neural networks, and an introduction to deep learning. Includes a team-based project. Credit not awarded for both CS 3540 and CS 5540. Prerequisites: STAT 2510 or STAT 5510; MATH 2522 or MATH 2544.",
    "soc_comments": "Prereqs enforced by the system: STAT 2510 or 5510;\nMATH 2522 or 2544; Co-located with CS 5540;\nTotal combined enrollment: 45;\nOpen to Degree and PACE students",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3650",
    "section": "Section A, CRN 15379",
    "title": "Computer Networks",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Chris Skalka",
    "description": "Introduction to the theoretical and pragmatic principles and practices of computer networking. Topics include: the Internet; wired and wireless communications protocols; network security protocols. Prerequisite: CS 2240. Cross-listed with: CMPE 3650.",
    "section_description": "Description: Introduction to the theoretical and pragmatic principles and practices of computer networking. We focus on the Internet, especially the TCP/IP protocol stack, the world-wide-web, Internet standards, and network security.\n\nCourse Topics: \n\nBasic Networking Concepts\n - Packet vs. circuit switching\n - Protocols and service models\n - Protocol layers\n - Standards and organizations\n\nApplication Layer\n - Services available to\n - HTTP\n - FTP\n - DNS\n - Basic socket programming\n\nTransport Layer\n - Mux and demux\n - TCP vs. UDP: services provided\n - Reliable data transport\n - Go-back-n, selective repeat\n - Congestion control principles and algorithms\n\nNetwork Layer\n - Routing and forwarding\n - IP datagram format\n - IP addressing\n - ICMP\n - Decentralized routing algorithms: Link State and Distance Vector\n - Internet ASs and routing\n\nLink Layer\n - Basic error detection\n - MAC protocols: CSMA\n\nNetwork Security\n - Security properties\n - Dolev-Yao model\n - Diffie-Hellman protocol\n - Certificate formats\n - TLS\n - Real-world vulnerabilities and countermeasures\n   + DDoS\n   + Buffer overflow attacks\n   + Heartbleed\n   + Mirai\n\nAdvanced Topics: Software Defined Networking\n - Basic concepts\n - Language and implementation support\n - Network federation and security concerns",
    "section_expectations": "This course is taught in a lecture and discussion format. Students can expect to work 6-10 hours per week on assigments outside of class, on a combination of written and programming assignments. Required software will be provided, and will work on any platform. The required text for this course is:\n\nTextbook: Computer Networking: A Top-Down Approach. James Kurose,\u200e Keith Ross.",
    "evaluation": "- Homework and programming assigments: 60%\n - In-class exams: 40%, broken down as follows:\n    + Midterm: 15%\n    + Final: 25%\n - Attendance: Class attendance is mandatory. Attendance will be checked. More than three unexcused absences will result in a 10% reduction of the final grade. Missing more than 8 classes will result in a 50% reduction in the final grade, i.e. failure in the course.",
    "soc_comments": "Cross-listed with CMPE 3650 A; Total combined enrollment: 40\nPrereqs enforced by the system: CS 2240",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3870",
    "section": "Section A, CRN 12348",
    "title": "Data Science I - Pinnacle",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jacob Martin",
    "description": "Data harvesting, cleaning, and summarizing; working with non-traditional, non-numeric data (social network, natural language textual data, etc.); scientific visualization; advanced data pipelines; Project-based. Credit not awarded for both CS 3870 and CS 5870. Prerequisites: CS 1210; STAT 1410 or STAT 2430; CS 2100 and MATH 2522 or MATH 2544 recommended. Cross-listed with: STAT 3870.",
    "soc_comments": "CS 2100 and MATH 2544 recommended;\nCross-listed with STAT 3870 A;\nOpen to Degree and PACE students\nPrereqs enforced by the system: CS 1210 and\nSTAT 1410 or 2430;\nTotal combined enrollment: 40;",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3920",
    "title": "Senior Seminar",
    "credit_hours": "1",
    "instructor": "Lisa Dion",
    "description": "Oral presentations that pertain to the ethical practice of computer science in government, industry, and academia. Topics may include computer security, copyright, and patent law. Prerequisite: Senior standing in Computer Science.",
    "section_description": "This course explores ethics at the intersection of society and technology.\nCourse goals and objectives:\n1) You will explore the ethical dilemmas and societal impacts of computer technologies. \n2) You will write about events and dilemmas related to technology and society. \n3) You will participate in discussions regarding these topics.\n4) You will participate in service that helps someone outside of Computer Science learn about technology.",
    "section_expectations": "You will be expected to attend class regularly and participate in discussions. You will work with a team to lead one of the discussions. You will be expected to work for 2 hours outside of class each week, per University policy regarding work required for a 1 credit hour course.",
    "evaluation": "Grading is based on participating in debates and discussions, writing weekly essays, doing a service experience, and completing other occasional assignments.",
    "soc_comments": "CS or CSIS senior students only",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3930",
    "section": "Section A, CRN 12183",
    "title": "Computing Career Preparation",
    "credit_hours": "1",
    "meeting_info": "M 5:05pm-5:55pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jill Duprey",
    "description": "Seminar to help students develop necessary skills for becoming computing professionals and exposes them to different computing careers. Topics include job search strategies, preparation for technical interviews, networking, and developing soft skills. Several guest lectures by computing professionals and alumni. Prerequisite: CS 2240.",
    "soc_comments": "Prereqs enforced by the system: CS 2240",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 3994",
    "section": "Section A, CRN 14971",
    "title": "Teaching Assistantship",
    "credit_hours": "1",
    "instructor": "Jackie Horton",
    "description": "Undergraduate student service as a teaching assistant, usually in an introductory-level course in the discipline, for which credit is awarded. Offered at department discretion.",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 5060",
    "section": "Section A, CRN 13202",
    "title": "Advanced Evolutionary Robotics",
    "credit_hours": "3",
    "meeting_info": "TTh 8:30am-9:45am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Joshua Bongard",
    "description": "Explores the automated design of autonomous machines using evolutionary algorithms. Covers relevant topics in evolutionary computation, artificial neural networks, robotics, simulation and xenobots. Students complete weekly programming assignments, formulate research a research hypothesis, and use their system to test that hypothesis. Credit not awarded for both CS 5060 and CS 3060. Prerequisite: Graduate student.",
    "soc_comments": "Graduate students only;\nCo-located with CS 3060A;\nTotal combined enrollment: 60",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 5120",
    "section": "Section A, CRN 15537",
    "title": "Adv Secure Distributed Comput",
    "credit_hours": "3",
    "meeting_info": "MWF 10:50am-11:40am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Joe Near",
    "description": "Techniques for secure computation involving multiple distributed parties, including applied cryptography, homomorphic encryption, secure multiparty computation, and zero-knowledge proof. Applications including Bitcoin and other blockchain systems, encrypted databases, federated learning, and computing on encrypted data. Credit not awarded for both CS 5120 and CS 3120. Prerequisites: Proficiency in Python programming; familiarity with LaTeX typesetting system; Graduate student.",
    "section_description": "Techniques for secure computation involving multiple distributed parties, including applied cryptography, homomorphic encryption, secure multiparty computation, verified computation, and zero-knowledge proof. Applications including Bitcoin and other blockchain systems, Ethereum and other smart contracts, encrypted databases, federated learning, and computing on encrypted data.\n\nThis is a programming-based course, with minimal theory background required. Programming projects may include:\n\n - Building an encrypted database that runs queries over encrypted data without decrypting it\n - Building a distributed protocol that computes the average salary among several parties, without revealing any individual's salary\n - Building a decentralized cryptocurrency, using techniques from blockchain research\n - Building a decentralized smart contract system\n - Building a system for distributed machine learning that trains a model without inspecting user data, using federated learning techniques",
    "section_expectations": "By the end of this course, you will be able to:\n\n    Describe the common goals of secure computation techniques\n    Define and apply the following concepts:\n        Secure multiparty computation\n        Homomorphic encryption\n        Zero-knowledge proof\n        Distributed ledger\n        Blockchain\n    Build systems that compute on encrypted data\n    Implement protocols for zero-knowledge proof\n    Evaluate the communications cost of a distributed protocol\n    Argue for the security of a distributed protocol",
    "evaluation": "Your grade for the course will be determined as follows:\n\n    11 homework assignments (5% each; 55% total)\n    in-class exercises (25% total)\n    midterm exam (5%)\n    final exam (5%)\n    final project (10%)",
    "soc_comments": "Familiarity with topics of data structures and computability\nas would come from CS 2240 and CS 2250;\nGraduate student standing required;\nCo-located with CS 3120;\nTotal combined enrollment: 40",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 5220",
    "section": "Section A, CRN 13210",
    "title": "Advanced Computer Architecture",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jason Hibbeler",
    "description": "Provides a thorough and sophisticated examination of various hardware aspects of modern computers, including: virtual memory, instruction-set architectures, instruction-level parallelism through pipelining, caches and cache coherence, threads, vector processors, and GPUs. Prerequisites: Familiarity with topics of computer organization as would come from the equivalent of CS 2210 or CMPE 2210; Graduate student. Credit not awarded for both CS 5220 and CS 3220 or CMPE 3220. Cross-listed with: CMPE 5220.",
    "section_description": "CS 5220 will provide a thorough and sophisticated examination of various hardware aspects of modern computers, including: virtual memory; instruction-set architectures; instruction-level parallelism through pipelining; caches and cache coherence; threads; vector processors; GPUs and the CUDA platform; and quantum computing if time allows.",
    "section_expectations": "Students will do written exercises; create software programs  that explore different areas of computer hardware; write short assembly-language programs; and write CUDA programs to learn and apply concepts of GPU-based software development.  Students will have the option of using a system in the Deep Green Cluster of the Vermont Advanced Computing Core for the GPU-based development.",
    "evaluation": "Student grades will be based on the exams, the written assignments, the programming projects, and attendance.",
    "soc_comments": "Familiarity with topics of computer organization as would\ncome from the equivalent of CS 2210;\nGraduate student standing;\nCross-listed with CMPE 5220 A; Co-located with CS 3220 A\nand CMPE 3220 A;\nTotal combined enrollment: 40",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 5240",
    "title": "Advanced Algorithm Design",
    "credit_hours": "3",
    "description": "Studies how to design and analyze computer program algorithms to solve real-world problems. Begins with a review of the concept of algorithm complexity and basic graph algorithms; and then covers algorithm design approaches such as greedy, divide and conquer, dynamic programming, and network flow; then, computational intractability will be treated. Credit not awarded for both CS 5240 and CS 3240. Prerequisite: Familiarity with data structures and elementary algorithms; Graduate student.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 5540",
    "section": "Section A, CRN 13204",
    "title": "Advanced Machine Learning",
    "credit_hours": "3",
    "meeting_info": "MWF 8:30am-9:20am UNASSIGNED (1/12 to 5/1)",
    "instructor": ". Staff",
    "description": "Provides a broad introduction to machine learning and statistical pattern recognition. Topics include: supervised learning (linear regression, logistic regression, neural networks, support vector machines, decision tree, ensemble models, random forest); unsupervised learning (clustering, dimensionality reduction, kernel methods); Also introduces deep learning such as convolutional neural networks and discusses recent applications. Credit not awarded for both CS 5540 and CS 3540. Prerequisites: Knowledge of statistics as from STAT 2510, knowledge of linear algebra as from MATH 2522 or MATH 2544; Graduate student.",
    "soc_comments": "Prereqs enforced by the system: STAT 2510 or STAT 5510;\nMATH 2522 or MATH 2544; Co-located with CS 3540;\nTotal combined enrollment: 45",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 5870",
    "section": "Section A, CRN 13203",
    "title": "Data Science I - Experience",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Juniper Lovato",
    "description": "Data harvesting, cleaning, and summarizing; working with non-traditional, non-numeric data (social network, natural language textual data, etc.); scientific visualization; advanced data pipelines with a practical focus on real datasets and developing good habits for rigorous and reproducible computational science; Project-based. Credit not awarded for both CS 5870 and CS 3870. Prerequisites: Knowledge of CS 1210 and either STAT 1410 or STAT 2430 required; knowledge of CS 2100 and MATH 2522 or MATH 2544 recommended; Graduate student or Instructor permission. Cross-listed with: STAT 5870, CSYS 5870.",
    "soc_comments": "Graduate student or Instructor permission;\nKnowledge of CS 1210 and either STAT 1410 or STAT 2430;\nKnowledge of CS 2100 and MATH 2522 or MATH 2544 strongly\nrecommended;\nCross-listed with STAT 5870 A and CSYS 5870 A;\nTotal combined enrollment: 40;\nPACE students with permission and override",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 6021",
    "section": "Section A, CRN 15785",
    "title": "Modeling Complex Systems II",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Laurent Hebert-Dufresne",
    "description": "Deep dive in state-of-the-art mathematical and computational methods for modeling complex systems; model theory, branching processes, probability generating functions, message passing, master equations, event-driven simulations, Gillespie algorithms, composition-rejection algorithms. Prerequisites: CS 6020 or CSYS 6020. Cross-listed with: CSYS 6021.",
    "soc_comments": "Prereqs enforced by the system: CS 6020 or CSYS 6020",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 6040",
    "section": "Section A, CRN 15231",
    "title": "Data Mining",
    "credit_hours": "3",
    "meeting_info": "TTh 8:30am-9:45am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Byung Lee",
    "description": "Introduces the field of data mining, including general data features, techniques for data preprocessing, data warehousing, and data-mining methods for mining frequent patterns, associations, and correlations; data classification; cluster analysis; and outlier detection. Prerequisite: Computer Science Graduate student.",
    "soc_comments": "Prereqs enforced by the system:\nComputer Science Graduate student",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 6391",
    "title": "Master's Thesis Research",
    "credit_hours": "Varies by section",
    "description": "Research for the Master's Thesis.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 6540",
    "section": "Section A, CRN 15784",
    "title": "Deep Learning",
    "credit_hours": "3",
    "meeting_info": "TTh 1:15pm-2:30pm UNASSIGNED (1/12 to 5/1)",
    "instructor": "Safwan Wshah",
    "description": "Introduction to Deep Learning algorithms and applications, including basic neural networks, convolutional neural networks, recurrent neural networks, deep unsupervised learning, generative adversarial networks and deep reinforcement learning. Includes a semester team-based project. Prerequisite: CS 3540. Cross-listed with: CSYS 6540.",
    "soc_comments": "Prereqs enforced by the system: CS 3540",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 6550",
    "section": "Section A, CRN 13301",
    "title": "Usable Privacy and Security",
    "credit_hours": "3",
    "meeting_info": "TTh 10:05am-11:20am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Yuanyuan Feng",
    "description": "Covers human factors in privacy and security, usability problems in today's computer security and privacy mechanisms, as well as the human-centered empirical research methods to understand and address these usability problems. Students will work individually or in small groups toward semester-long course research projects. Co-requisite: Knowledge of STAT 1410 or equivalent.",
    "section_description": "From security breaches to data leak, from stolen passwords to data misuse. For all the security and privacy problems we face today, technology alone cannot provide us satisfactory solutions. Human factors play an essential role in ensuring privacy and security in today\u2019s computer systems. This course covers human factors in privacy and security, usability problems in today\u2019s computer security and privacy mechanisms, as well as the human-centered research methods to understand and address these usability problems. \nThis course has a strong focus on empirical research methods and introduces human subject research in computing and engineering fields. Students will gain skills and experiences to design and conduct rigorous empirical research aimed at understanding, evaluating, and/or solving usability issues in computer privacy and security systems. It is particularly suitable for students who are interested in the human aspect of computer privacy and security and who want to strengthen their research skills. Students will work in small groups towards their course research projects.\nPrerequisite: Knowledge of STAT 1410 or equivalent.",
    "section_expectations": "Students are expected to read required course materials before class, participate in class discussion, complete individual/group assignments, and engage in various classroom activities. There will be in-class quizzes and one summative exam.\nDepending on the instructor\u2019s availability, graduate students may continue working on their research projects after the semester under the guidance of the instructor, either as their thesis projects or summer research projects with publication outcomes.\n\nCourse Materials:\nTextbook available as ebook from UVM libraries\nPrimary textbook: Lazar, J., Feng, J. H., & Hochheiser, H. (2017). Research Methods in Human-Computer Interaction. Morgan Kaufmann.\nOther required readings\nPeer-reviewed research papers in the area of usable privacy and security, which will be made available via BrightSpace\n\n\nEvaluations: \nStudent grades will be based on: (1) in-class quizzes based on required readings, (2) homework assignments, (3) one summative exam, (4) class participation, and (5) multiple assignments for the course research project including written assignments and presentations.",
    "soc_comments": "Prereq: Knowledge of STAT 1410 or equivalent",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 6990",
    "section": "Section A, CRN 15232",
    "title": "Quantum Computing",
    "credit_hours": "3",
    "meeting_info": "TTh 10:05am-11:20am UNASSIGNED (1/12 to 5/1)",
    "instructor": "Jennifer Paykin",
    "description": "Subject will vary from year to year. May be repeated for credit with Instructor permission.",
    "semester": "Spring 2026"
  },
  {
    "course_code": "CS 7491",
    "title": "Doctoral Dissertation Research",
    "credit_hours": "1 to 18",
    "description": "Research for the Doctoral Dissertation.",
    "soc_comments": "Varies by section",
    "semester": "Spring 2026"
  }
]