[
  {
    "course_code": "CS 1080",
    "section": "Section A, CRN 91695",
    "title": "Intro to Web Site Dev",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm in JAMES M JEFFORDS HALL 127 (8/25 to 12/5)",
    "instructor": "Murat Gungor",
    "description": "Provides a strong foundation in HTML, CSS, images, beginning web programming, and web design so that the student can create a complete functional web site in a team based final project.",
    "section_description": "Lays a foundation in website coding with HTML, CSS, JavaScript, images, and basic web design, empowering students to create a functional website.",
    "section_expectations": "Assumes no prior experience with programming.",
    "evaluation": "Quizzes, Active Learning Exercises, Lab Exercises, Projects",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section B, CRN 90147",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "meeting_info": "TTh 8:30am-9:45am in VOTEY BLDG 207 (8/25 to 12/5)",
    "instructor": "Samantha Connolly",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming with Python.",
    "section_expectations": "Assumes no prior experience with programming.",
    "evaluation": "Weekly homework, lab and active learning exercises. Two exams (no final exam). Final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section C, CRN 93418",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "meeting_info": "TTh 10:05am-11:20am in MARSH LIFE SCI 105 (8/25 to 12/5)",
    "instructor": "Samantha Connolly",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming with Python.",
    "section_expectations": "Assumes no prior experience with programming.",
    "evaluation": "Weekly homework, lab and active learning exercises. Two exams (no final exam). Final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section D, CRN 95515",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "meeting_info": "TTh 1:15pm-2:30pm in VOTEY BLDG 205 (8/25 to 12/5)",
    "instructor": "Laura Marthaler",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming and computer science with Python. Textbook: An Introduction to Programming and Computer Science with Python (ISBN: 979-8-9887092-0-6). Hard copy available in UVM Bookstore / free PDF available via Brightspace LMS.",
    "section_expectations": "Assumes no prior experience with programming. Student should have high school algebra. Regularly scheduled assessments.",
    "evaluation": "Weekly homework and quizzes; in-class lab exercises; metacognition essays; final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section E, CRN 95516",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "meeting_info": "TTh 10:05am-11:20am in VOTEY BLDG 205 (8/25 to 12/5)",
    "instructor": "Laura Marthaler",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming and computer science with Python. Textbook: An Introduction to Programming and Computer Science with Python (ISBN: 979-8-9887092-0-6). Hard copy available in UVM Bookstore / free PDF available via Brightspace LMS.",
    "section_expectations": "Assumes no prior experience with programming. Student should have high school algebra. Regularly scheduled assessments.",
    "evaluation": "Weekly homework and quizzes; in-class lab exercises; metacognition essays; final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section F, CRN 92166",
    "title": "Comp Prog I: for CS majors",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm in MARSH LIFE SCI 105 (8/25 to 12/5)",
    "instructor": "Samantha Connolly",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming and computer science with Python.",
    "section_expectations": "Assumes no prior experience with programming. Student should have high school algebra.",
    "soc_comments": "Open to CS, CSIS, and DS majors only",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section G, CRN 92681",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm in LAFAYETTE HALL L403 (8/25 to 12/5)",
    "instructor": "Brian Lavallee",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming and computer science with Python. Textbook: An Introduction to Programming and Computer Science with Python (ISBN: 979-8-9887092-0-6). Hard copy available in UVM Bookstore / free PDF available via Brightspace LMS.",
    "section_expectations": "Assumes no prior experience with programming. Student should have high school algebra/geometry.",
    "evaluation": "Weekly homework and quizzes; three exams; in-class lab exercises; metacognition essays; final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section H, CRN 93018",
    "title": "Computer Programming I",
    "credit_hours": "3",
    "meeting_info": "MW 5:05pm-6:20pm in LAFAYETTE HALL L403 (8/25 to 12/5)",
    "instructor": "Brian Lavallee",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming and computer science with Python. Textbook: An Introduction to Programming and Computer Science with Python (ISBN: 979-8-9887092-0-6). Hard copy available in UVM Bookstore / free PDF available via Brightspace LMS.",
    "section_expectations": "Assumes no prior experience with programming. Student should have high school algebra/geometry.",
    "evaluation": "Weekly homework and quizzes; three exams; in-class lab exercises; metacognition essays; final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1210",
    "section": "Section I, CRN 93373",
    "title": "Comp Prog I: for CS majors",
    "credit_hours": "3",
    "meeting_info": "MW 3:30pm-4:45pm in VOTEY BLDG 207 (8/25 to 12/5)",
    "instructor": "Brian Lavallee",
    "description": "Introduction to algorithmic problem solving and computer programming. Designed to provide a foundation for further studies in computer science.",
    "section_description": "Introduction to programming and computer science with Python. Textbook: An Introduction to Programming and Computer Science with Python (ISBN: 979-8-9887092-0-6). Hard copy available in UVM Bookstore / free PDF available via Brightspace LMS.",
    "section_expectations": "Assumes no prior experience with programming. Student should have high school algebra/geometry.",
    "evaluation": "Weekly homework and quizzes; three exams; in-class lab exercises; metacognition essays; final project.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1320",
    "section": "Section A, CRN 94171",
    "title": "Puzzles, Games & Algorithms",
    "credit_hours": "3",
    "meeting_info": "MWF 10:50am-11:40am in VOTEY BLDG 303 (8/25 to 12/5)",
    "instructor": "Lisa Dion",
    "description": "Introductory computer science through exploration and analysis of mathematical puzzles and games, and the algorithms that handle them. Prerequisite: No credit if taken after CS 2100.",
    "section_description": "In this course, you will explore computational thinking through the analysis of mathematical puzzles and games, and the algorithms that handle them. Learning objectives include:\n- To engage in productive struggle and data collection to solve common puzzles and understand common mathematical games through computational thinking\n- To understand, appreciate, and communicate various approaches and algorithms to solving the games and puzzles\n- To connect the puzzles and games to real-world applications and transfer the knowledge and understanding to help shape real-world decisions and actions",
    "section_expectations": "This course is taught in an active learning style, so class attendance will be crucial. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "This course is taught using a points-based system. Each week a few assignments will be released, with varying formats and point values. Your final grade will be based on the number of points you accumulate by the end of the semester.",
    "soc_comments": "Open to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1500",
    "section": "Section A, CRN 90913",
    "title": "Seminar for New CS Majors",
    "credit_hours": "1",
    "meeting_info": "F 2:20pm-3:10pm in VOTEY BLDG 105 (8/25 to 12/5)",
    "instructor": "Samantha Connolly",
    "description": "A fun and accessible breadth-first introduction to the CS community and curricula at UVM. CS faculty serve as guest lecturers to introduce new CS majors to selected topics covered in upper division UVM CS electives. Prerequisites: Computer Science or Computer Science & Information Systems majors who have not yet completed CS 2100. Co-requisite: CS 1210 or CS 2100.",
    "section_description": "This course is intended to introduce new Computer Science majors to the UVM CS degree program.\n\nCourse goals:\n- Build community among CS students and faculty\n- Give students an appreciation of the breadth of CS\n- Excite students about advanced CS electives\n- Help students navigate the various curricular options in CS at UVM\n- Help students begin for a transition to a career in CS",
    "section_expectations": "You will be expected to attend each lecture period and complete written assignments outside of class time. You will be expected to work for 2 hours outside of class each week, per University policy regarding work required for a 1-credit-hour course.",
    "evaluation": "Your final grade will be based on pre-class writeups, post-class quizzes, and occasional homework assignments.",
    "soc_comments": "CS, CSIS, or Data Science majors only",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1640",
    "section": "Section A, CRN 90230",
    "title": "Discrete Structures",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm in PERKINS BUILDING 003 (8/25 to 12/5)",
    "instructor": "Jeffrey Jewell",
    "description": "Introduction to analytic and formal methods of computer science with practical examples, including analysis or data structures, recursion relations, proof methods, and logic programming. Credit not awarded for both CS 1640 and MATH 2055. Prerequisites: CS 1210 or CS 2100; MATH 1234 or MATH 1242.",
    "soc_comments": "Prereqs enforced by the system: (CS 1210 or 2100) and\n(MATH 1234 or 1242);\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1870",
    "section": "Section A, CRN 92324",
    "title": "Intro to Data Science",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm in VOTEY BLDG 209 (8/25 to 12/5)",
    "instructor": "Roger Tenore",
    "description": "Basic techniques of data harvesting and cleaning; association rules, classification and clustering; analyze, manipulate, and visualize data using programming languages. Basic principles of probability and statistical modeling/inference to make meaning out of large datasets. Credit not awarded after STAT 3000 or greater. Cross-listed with: STAT 1870.",
    "soc_comments": "Cross-listed with STAT 1870 A;\nTotal combined enrollment: 45;\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 1994",
    "title": "Teaching Assistantship",
    "credit_hours": "Varies by section",
    "description": "Assist in instruction of undergraduate computer science courses under the direct supervision of a faculty member. Instructor permission required.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2100",
    "title": "Intermediate Programming",
    "credit_hours": "Varies by section",
    "instructor": "Jackie Horton",
    "description": "Intermediate programming concepts including common data structures, algorithms, style, design, documentation, testing and debugging techniques, and an introduction to object-oriented programming. Prerequisite: CS 1210 with a grade of C- or better.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2210",
    "title": "Computer Organization",
    "credit_hours": "3",
    "instructor": "Clayton Cafiero",
    "description": "Introduction to computer system organization including performance, assembly language, machine-level data representation, arithmetic for computers, processor datapath control, memory, and input/output. Includes significant semester project. Cross-listed with: CMPE 2210. Prerequisite: CS 2100.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2240",
    "title": "Data Struc & Algorithms",
    "credit_hours": "3",
    "description": "Design and implementation of linear structures, trees and graphs. Examples of common algorithmic paradigms. Theoretical and empirical complexity analysis. Sorting, searching, and basic graph algorithms. Prerequisites: CS 2100 with a grade of C- or better; minimum Sophomore standing.",
    "section_description": "You will learn the common data structures for abstract data types and algorithms, including lists, trees, heaps, sorting, hashing, and disjoint set finding/uniting. You will also consider and compare their performances.\nCourse goals and objectives:\n1) You will gain knowledge of different data structures and recognize the use cases for each.\n2) You will consider not just whether algorithms function correctly or not, but also their efficiency and performance as the amount of data grows.\n3) You will use the C++ programming language to collect data with and analyze data structures and algorithms.",
    "section_expectations": "This class is run lecture-style with practice problems and active learning activities sprinkled throughout. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "Your final grade will be based on quizzes, programming projects, active learning activities, surveys, and a final exam.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2250",
    "title": "Computability& Complexity",
    "credit_hours": "3",
    "description": "Formal languages and expressiveness. Turing completeness and Church's Thesis. Decidability and tractability. Complexity classes and theory of NP completeness. Prerequisites: CS 1640 or MATH 2055. Co-requisite: CS 2240.",
    "soc_comments": "Prereqs enforced by the system: CS 1640 or MATH 2055;\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2300",
    "title": "Advanced Programming",
    "credit_hours": "3",
    "instructor": "Lisa Dion",
    "description": "Builds programming maturity and proficiency through significant projects with spiral development, including program specification, design, implementation, debugging, testing, validation, internal and external documentation. Focus on advanced topics including efficiency, profiling, modularity, extensibility, programming paradigms, design patterns, memory management, and generics. Prerequisite: CS 2240.",
    "section_description": "This project-based course is separated into four modules. You will learn the details of C++ through a mixture of guided and open-ended projects, oral/written assignments, and other activities. An emphasis will be put on creativity and collaboration.\n\nCourse goals and objectives include:\n1) To master C++ programming.\n2) To expand programming knowledge to projects that require multiple languages.\n3) To explore event-based programming through C++ graphics projects.\n4) To develop the skills necessary to effectively collaborate in teams.",
    "section_expectations": "Every three-week module will be themed and will have lectures, active learning activities, and assignments associated with it. You will be expected to work for 6 hours outside of class each week, per University policy regarding work required for a 3 credit hour course.",
    "evaluation": "This course uses a point-based grading system, where you get to choose which assignments you want to complete to earn points towards your final grade.",
    "soc_comments": "Prereqs enforced by the system: CS 2240;\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2500",
    "section": "Section A, CRN 94648",
    "title": "Intro to Database Systems",
    "credit_hours": "3",
    "meeting_info": "MW 3:30pm-4:45pm in INNOVATION HALL E204 (8/25 to 12/5)",
    "instructor": "Jackie Horton",
    "description": "Serves as a foundational course in modern database systems. Introduces the fundamental concepts and techniques of relational database management, data modeling, relational algebra, structured query language, database design and database management.  Practical experience will be gained through a series of labs and projects. Credit not awarded after CS 3040 or CS 5040. Prerequisites: CS 1210; minimum Sophomore standing. Pre/Co-requisites: CS 1210; minimum Sophomore standing.",
    "section_description": "This course will serve as a foundational course in modern database systems. Students will be introduced to the fundamental concepts and techniques of relational database management, data modeling, relational algebra, structured query language, database design and database management.  The course will make extensive use of Python to interface with SQLite. Practical experience will be gained through a series of labs and projects.  Credit not awarded after CS 3040 or CS5040.\n\nPre-req:  CS21/CS1210 and sophomore standing.  Strong Python skills will be required.",
    "section_expectations": "Completion of CS1210. Sophomore Standing.",
    "soc_comments": "Prereqs enforced by the system: CS 1210\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2510",
    "section": "Section A, CRN 96127",
    "title": "Intro Artificial Intelligence",
    "credit_hours": "3",
    "meeting_info": "MWF 9:40am-10:30am in LAFAYETTE HALL L200 (8/25 to 12/5)",
    "instructor": "Clayton Cafiero",
    "description": "An introduction to artificial intelligence including logic and rule-based approaches, heuristic search, A*, IDA*, minimax, alpha/beta pruning, expectiminimax, Markov models and MDPs, decision tree, ensemble learning / random forest, the neural model and simple multi-layer perceptrons. Other topics, if any may vary. Prerequisite: C- or better in CS 2240.",
    "soc_comments": "Prereq: CS 2240 with a grade of C- or better",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2870",
    "title": "Basics of Data Science",
    "credit_hours": "3",
    "instructor": "Jacob Martin",
    "description": "Basic data science techniques, from import to cleaning to visualizing and modeling, using the R language. Machine learning methods include regression, classification and clustering algorithms. Programming methods include user-defined functions. Prerequisite: STAT 1110, STAT 1410, or STAT 2430. Cross-listed with: STAT 2870.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2920",
    "section": "Section A, CRN 92054",
    "title": "SL:Girls Who Code",
    "credit_hours": "1",
    "meeting_info": "Sa 9:30am-12:30pm in LAFAYETTE HALL L309 (8/25 to 12/5)",
    "instructor": "Lisa Dion",
    "description": "Service learning experience that benefits the University or the Community under the direction of a CS faculty member. Prerequisite: Instructor permission.",
    "section_description": "This is for students who help facilitate the UVM Girls Who Code club on Saturday mornings. We teach local K-12 girls the basics in programming.",
    "section_expectations": "You will be expected to attend the club every Saturday, participate in reflections and planning before and after each session, and lead the session a few times during the semester.",
    "evaluation": "You will be evaluated based on attendance, completion of tasks, being a good role model for the girls, lesson planning, and leadership.",
    "soc_comments": "Instructor permission required\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2993",
    "title": "Independent Study",
    "credit_hours": "Varies by section",
    "description": "A course which is tailored to fit the interests of a specific student, which occurs outside the traditional classroom/laboratory setting under the supervision of a faculty member, for which credit is awarded. Offered at department discretion.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 2994",
    "title": "Teaching Assistantship",
    "credit_hours": "1 to 3",
    "description": "Undergraduate student service as a teaching assistant, usually in an introductory-level course in the discipline, for which credit is awarded. Offered at department discretion.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3010",
    "section": "Section A, CRN 90238",
    "title": "Operating Systems",
    "credit_hours": "3",
    "meeting_info": "MWF 12pm-12:50pm in VOTEY BLDG 207 (8/25 to 12/5)",
    "instructor": "Jason Hibbeler",
    "description": "Supervisory and control software for multiprogrammed computer systems. Processes, threads, synchronization, interprocess communication, scheduling, memory management, resource allocation, performance evaluation, secondary storage, case studies. Prerequisites: CS 2300 and CS 2210.",
    "section_description": "CS 3010 will provide a broad overview of operating systems, focused primarily on Linux.  We will pursue an in-depth investigation of the following topics: the OS kernel and kernel mode; concurrency and threads; synchronization and deadlock;, scheduling algorithms; virtual-memory management; I/O devices; and file-system management.\n\nFrom this course, students will become proficient in developing system-level programs in C.\n\nThe recommended text will be Operating System Concepts: Principles and Practice, 2nd Edition, by Anderson and Dahlin.",
    "section_expectations": "Students will learn concepts by creating several C programs on Linux that apply the various concepts from class.  There will be a midterm exam and a final exam; several short Brightspace quizzes covering concepts from the lectures; and in-class practice worksheets.",
    "evaluation": "Course grades will be based on the midterm and final exams; the programming projects; the Brightspace quizzes covering concepts from the lectures; and attendance.",
    "soc_comments": "Prereqs enforced by the system: CS 2210 and CS 2300\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3040",
    "section": "Section A, CRN 93083",
    "title": "Database Systems",
    "credit_hours": "3",
    "meeting_info": "MWF 8:30am-9:20am in MARSH LIFE SCI 105 (8/25 to 12/5)",
    "instructor": "Byung Lee",
    "description": "Techniques for processing very large collections of data. Secondary storage. Database design and management. Query languages and optimization. Database recovery. Credit not awarded for both CS 3040 and CS 5040. Prerequisite: CS 2240.",
    "section_description": "Theory and practice of database design and application programming, and basic internals of a database management system. Specific topics include database concepts, data models and database design, query languages, database programming concepts and languages, files and physical design, query processing and optimization, transaction concepts, concurrency control and recovery, and access control.",
    "section_expectations": "Lecture course. 6 to 8 hours of work expected outside the classroom.  Prerequisite: Familiarity with basic data structures, algorithms, discrete mathematics, and computer organization. Required text: Ramez Elmasri and Sham Navathe, Fundamentals of Database Systems (7th edition), Pearson, 2016.",
    "evaluation": "Weekly homework, including written and programming. Class attendance.",
    "soc_comments": "Prereqs enforced by the system: CS 2240;\nColocated with CS 5040 A;\nTotal combined enrollment: 45;\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3050",
    "section": "Section A, CRN 92169",
    "title": "Software Engineering",
    "credit_hours": "3",
    "meeting_info": "MWF 2:20pm-3:10pm in LAFAYETTE HALL L102 (8/25 to 12/5)",
    "instructor": "Jason Hibbeler",
    "description": "Treatment of software engineering problems and principles, with a focus on iterative software development. A significant part of the course is devoted to two multi-week team projects. Prerequisite: CS 2300.",
    "section_description": "CS 3050 will present a broad overview of the many activities involved in software engineering.  In particular, we will devote particular attention requirements engineering and to iterative software development.  We will also cover additional topics including design and implementation, verification, evolution, and software maintenance.  Students will learn and make use of automated frameworks for analyzing, testing, and documenting source code.\n\nStudents will acquire the skills needed to work constructively in an agile framework (Kanban, Scrum) on a large-scale team project and will learn to use git effectively.\n\nThe recommended text is Essentials of Software Engineering, by Tsui, Karam, and Bernal (ISBN 1284106004).",
    "section_expectations": "There will be three individual in-class coding challenges, a short team programming project, and large team programming project that will span approximately half the semester.  There will be two exams.  Students must be able to work effectively as part of a team.",
    "evaluation": "Course grades will be based on in-class coding challenges, on the exams, and on the two team projects.  The team projects will count for a significant portion of the course grade.  In addition, students will present material in writing and orally in class, and these presentations will count towards the course grade.  Students will also be evaluated on their ability to work as part of the team.  Class attendance will also count towards the course grade.",
    "soc_comments": "Prereqs enforced by the system: CS 2300;\nProject presentation: Thursday, Sept 25th, 6:00 - 9:00 PM\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3110",
    "section": "Section A, CRN 92684",
    "title": "Data Privacy",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm in DEWEY HALL 314 (8/25 to 12/5)",
    "instructor": "Joseph Near",
    "description": "Explores the research field of data privacy, including privacy attacks on anonymized data, and formal approaches like k-Anonymity and differential privacy. Applies the theory of data privacy to real problems in programming projects. Credit not awarded for both CS 3110 and CS 5110 Prerequisites: CS 2240, CS 2250.",
    "section_description": "How can we learn from sensitive data collected from individuals, while protecting the privacy of those individuals?\n\nThis question is central to the study of data privacy, and is increasingly relevant with the widespread collection of our personal data. Analysis of this data can lead to important benefits for society, including advances in medicine and public infrastructure, but can also result in privacy breaches that expose our most closely-held secrets.\n\nThis course will explore both threats to privacy and solutions to the data privacy problem. We will demonstrate that traditional approaches to protecting privacy, such as anonymization, are subject to powerful attacks that reveal individuals\u2019 sensitive data. We will see that while more recent approaches for protecting privacy, including k-anonymity and l-diversity, are more resistant to these attacks, they are not immune.\n\nThen, we will explore recent formal notions of privacy, including differential privacy. Differential privacy provides a rigorous formal definition of individual privacy that enables a wide range of statistical analyses while protecting privacy. We will explore a number of differentially private algorithms for analytics and machine learning, and learn about the algorithmic building blocks and proof techniques used to develop them.\n\nIn addition to learning about the mathematical foundations of differential privacy, we will explore its practical implications. We will learn about existing practical systems for enforcing differential privacy and examine the challenges of building such systems. This course will include programming assignments and an end-of-semester project, in which students are expected to demonstrate both mastery of the concepts we explore and understanding of their practical implications by building their own systems that perform privacy-preserving analyses on real data.",
    "section_expectations": "This course will be structured around lectures and a weekly programming assignment. Each lecture will cover concepts in ensuring data privacy; in the corresponding programming assignment, you will implement algorithms corresponding to these concepts. Students should expect to spend 5-6 hours per week outside of class on the weekly programming assignments. The required materials for this course are all freely available online.",
    "evaluation": "Your grade for the course will be determined as follows:\n\n    10 homework assignments (5% each; 50% total)\n    exams (20% total)\n    in-class exercises (20% total)\n    final project (10%)\n\nHomework Assignments\n\nThis course will use Python for examples and for programming assignments. Students are expected to be proficient in Python programming. Programming assignments will be distributed and turned in as Jupyter notebooks. See this page for information on installing Jupyter; the Anaconda method is recommended, since it also installs the other libraries we will use in the course.",
    "soc_comments": "Prereqs enforced by the system: CS 2240 and CS 2250;\nCo-located with CS 5110 A;\nTotal combined enrollment: 70\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3240",
    "title": "Algorithm Design & Analysis",
    "credit_hours": "3",
    "description": "Comprehensive study of algorithms including greedy algorithms, divide and conquer, dynamic programming, graph algorithms and network flow. Computational intractability. Approximation, local search and randomization. Credit not awarded for both CS 3240 and CS 5240. Prerequisite: CS 2240. Pre/co-requisites: Recommended: CS 2250; STAT 2430, or STAT 2510.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3250",
    "section": "Section A, CRN 95707",
    "title": "Programming Languages",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm in INNOVATION HALL E210 (8/25 to 12/5)",
    "instructor": "Jennifer Paykin",
    "description": "Principles of programming language design and fundamental implementation concepts. Syntax, semantics, and static analysis of programs. Provable properties of programming languages such as type safety. Prerequisites: CS 2240, CS 2250.",
    "section_description": "The focus of this course is on the design of programming languages (PLs) and general underlying concepts. We will emphasize: \n\nSyntax (form):  What language constructs are desirable, feasible? How do we want to write programs? \n\nSemantics (meaning): How do we precisely define and document what language features should \u201cdo\u201d? \n\nImplementation: How do we implement a language so that its features behave on a computer the way we document/intend them to? \n\nReasoning about programs: well-designed languages allow careful, even formal, thought and reasoning, not just hacking. How can formal reasoning be integrated in PL design and used for programming?\n\nProgram properties, aka Metatheory: How can we define and prove general properties of programs, such as type safety, based on language design? \n\nStatic (compile-time) analysis: Ensures properties of programs, by predicting the meaning of programs based solely on their form.",
    "section_expectations": "Prerequisites: CS 2240, CS 2250. The main course materials aside from lectures will be course notes that summarize main topics and will be posted before each class. These and additional supplementary materials will be posted on blackboard. All materials for the class will be freely available.",
    "evaluation": "Homework for the course will be a combination of written assignments and programming assignments. Written assignments will generally be distributed every 10 to 14 days and may include small programming exercises, while programming assignments will be less frequent but will require more programming effort. All homework solutions are expected to be an original, individual effort. (60% of final grade).\n\nIn addition to homework, a midterm and final exam will be conducted (40% of final grade).",
    "soc_comments": "Prereqs enforced by the system: CS 2240, CS 2250\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3280",
    "section": "Section A, CRN 95641",
    "title": "Human-Computer Interaction",
    "credit_hours": "3",
    "meeting_info": "TTh 1:15pm-2:30pm in LAFAYETTE HALL L111 (8/25 to 12/5)",
    "instructor": "Yuanyuan Feng",
    "description": "Covers the foundational theories and methods in the interdisciplinary field of human-computer interaction, focuses on the human-centered design and evaluation of user interfaces for various computing systems, as well as introduces a wide range of topics in current human-computer interaction research. Prerequisites: Minimum Junior standing. Pre/Co-requisites: CS 1080 or equivalent experience; completion of WIL1.",
    "section_description": "This course fulfills WIL2 (Writing and Information Literacy Tier 2).\nWhy I cannot figure out how to use this thing I just bought? Why is this website/app so hard to use? These frustrations arise when systems are not designed with people in mind. This course is centered around one fundamental question: how can we design human-centered computing systems that people find useful and usable?\n\nThis course (1) covers the foundational theories and methods in the interdisciplinary field of human-computer interaction (HCI), (2) focuses on the human-centered design and evaluation of user interfaces for various computing systems (e.g., tangible objects, the web, mobile devices, the Internet of Things), as well as (3) introduces a wide range of topics in current HCI research (e.g., social computing, ubiquitous computing, inclusive computing).",
    "section_expectations": "The course materials include:\nTextbook: Norman, D. (2013). The Design of Everyday Things: Revised and Expanded Edition (Hard copy recommended; paperback around $15).\nBook chapters, articles, papers, and other online materials by HCI practitioners and researchers (available via UVM Library or online).\n \nStudents are expected to read assigned course materials before class, submit homework for class discussion before class, participate in class discussion, and engage in various classroom activities. There will be in-class quizzes and a summative exam.\n\nStudents are expected to work in groups on their semester-long course projects, where they are expected to apply human-centered methods to (1) identify a specific problem that can be addressed by a new or improved interactive user interface, (2) propose potential design alternatives, (3) evaluate these design alternatives, (4) implement the most appropriate user interface design as a prototype, and (5) report the project outcomes in a written report and an oral presentation.\n\nStudents should expect to spend approximately 4 hours a week on coursework outside of class, with additional time on their semester-long course projects.",
    "evaluation": "Evaluations:\nStudent grades will be based on: (1)  in-class quizzes, (2) a summative exam, (3) class participation, and (4) several individual and group deliverables for the course project, including written assignments, presentations, and a user interface prototype.",
    "soc_comments": "Prereq: CS 1080 or equivalent experience;\nminimum junior standing;\ncompletion of WIL1\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3540",
    "section": "Section A, CRN 94179",
    "title": "Machine Learning",
    "credit_hours": "3",
    "meeting_info": "TTh 1:15pm-2:30pm in VOTEY BLDG 207 (8/25 to 12/5)",
    "instructor": "Safwan Wshah",
    "description": "Introduction to machine learning algorithms, theory, and implementation, including supervised and unsupervised learning; topics typically include linear and logistic regression, learning theory, support vector machines, decision trees, backpropagation artificial neural networks, and an introduction to deep learning. Includes a team-based project. Credit not awarded for both CS 3540 and CS 5540. Prerequisites: STAT 2510 or STAT 5510; MATH 2522 or MATH 2544.",
    "section_description": "This course offers an introduction to advanced machine learning and statistical pattern recognition algorithms. It includes a wide array of topics, including supervised learning (covering linear regression, logistic regression, neural networks, support vector machines, decision trees, ensemble models, and random forests), as well as unsupervised learning (clustering, dimensionality reduction, and kernel methods). In addition, the course delves into the introduction of deep learning, featuring convolutional neural networks, and explores the latest applications of machine learning. You'll also gain valuable insights and guidance on effectively implementing machine learning algorithms.",
    "section_expectations": "Weekly assignments, Term Project and two Mid-term exams.",
    "evaluation": "\u2022 Assigned homework (30%)\n\u2022 Term Project (30%)\n\u2022 Mid term exams (30%). To exams will be given during the semester, no final exam.\n\u2022 Class attendance and participation (10%).",
    "soc_comments": "Prereqs enforced by the system: STAT 2510 or 5510, and\nMATH 2522 or 2544;\nCo-located with CS 5540 A and\nCross-listed with CSYS 5990 A and CMPE 3990 A;\nTotal combined enrollment: 45;\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3737",
    "section": "Section A, CRN 93742",
    "title": "Intro to Numerical Analysis",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm in PERKINS BUILDING 102 (8/25 to 12/5)",
    "instructor": "Jun Yu",
    "description": "Error analysis, root-finding, interpolation, least squares, quadrature, linear equations, numerical solution of ordinary differential equations. Credit not awarded for both CS 3737 and CS 5737 or MATH 5737 Prerequisites: MATH 2248; MATH 2522, MATH 2544, or MATH 3201; CS 1210. Cross-listed with: MATH 3737.",
    "section_description": "This course covers introductory materials on numerical analysis. Topics include: solution of nonlinear equations, solving systems of linear equations, approximating functions, numerical differentiation and integration, and numerical solution of ODEs. Some applications to physics and engineering will also be covered.",
    "section_expectations": "This course is in lecture format. Homework (or computer project) will be assigned for almost every class. Students should have knowledge of calculus III (multivariable calculus), linear algebra, and computer programming before taking this class.",
    "evaluation": "Grades are based on midterm and final exams, quizzes, and homework/computer projects.",
    "soc_comments": "Prereqs enforced by the system: CS 1210 and MATH 2248 and\n(MATH 2522 or 2544 or 3201);\nCross listed with MATH 3737;\nTotal combined enrollment: 35",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3750",
    "section": "Section A, CRN 90889",
    "title": "Mobile App Development",
    "credit_hours": "3",
    "meeting_info": "MWF 3:30pm-4:20pm in JAMES M JEFFORDS HALL 112 (8/25 to 12/5)",
    "instructor": "Jason Hibbeler",
    "description": "A projects-based course focusing on software development for mobile devices, including the concepts of event-driven programming, GUI design and implementation, utilization of hardware sensors, and client/server applications. A significant part of the course is devoted to a multi-month team development project. Prerequisite: CS 2300, Senior standing. Pre/co-requisites: Recommended: CS 2480 or CS 3040.",
    "section_description": "CS 3750 will provide a broad overview of iOS and Swift development, including UI development, interaction with the web, the camera, maps, and other capabilities of iOS devices.\n\nFrom this course, students will become proficient in developing simple iOS applications using the Swift programming language and the SwiftUI development framework.\n\nIt is best to have access to a computer running macOS, but it's also possible to use the paid service macincloud.com for the iOS development in the course.  CEMS will provide reimbursement for students using this service.",
    "section_expectations": "The instructor will discuss and elaborate on the material from the text in class.  Students will work in teams on a semester-long project for a stakeholder who might be a classmate or someone from the University community or someone from outside of the University community.\n\nStudents will learn concepts by completing several individual/pair assignments and by working on their semester-long team project.",
    "evaluation": "Student grades will be based on the individual/pair assignments and the team project and on attendance.",
    "soc_comments": "Prereqs enforced by the system: CS 2300;\nOpen to Degree and PACE students;\nProject Proposals: Thursday, Sept 18th, 6:00-9:00 PM",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3870",
    "section": "Section A, CRN 92312",
    "title": "Data Science I - Pinnacle",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm in INNOVATION HALL E430 (8/25 to 12/5)",
    "instructor": "Alice Patania",
    "description": "Data harvesting, cleaning, and summarizing; working with non-traditional, non-numeric data (social network, natural language textual data, etc.); scientific visualization; advanced data pipelines; Project-based. Credit not awarded for both CS 3870 and CS 5870. Prerequisites: CS 1210; STAT 1410 or STAT 2430; CS 2100 and MATH 2522 or MATH 2544 recommended. Cross-listed with: STAT 3870.",
    "soc_comments": "Prereqs enforced by the system: CS 1210 and\n(STAT 1410 or 2430);\nCross listed with STAT 3870 A;\nTotal combined enrollment: 40\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3920",
    "title": "Senior Seminar",
    "credit_hours": "1",
    "description": "Oral presentations that pertain to the ethical practice of computer science in government, industry, and academia. Topics may include computer security, copyright, and patent law. Prerequisite: Senior standing in Computer Science.",
    "section_description": "This course explores ethics at the intersection of society and technology.\nCourse goals and objectives:\n1) You will explore the ethical dilemmas and societal impacts of computer technologies. \n2) You will write about events and dilemmas related to technology and society. \n3) You will participate in debates and discussions regarding these topics.\n4) You will participate in service that helps someone outside of Computer Science learn about technology.",
    "section_expectations": "The first half of the semester is run debate-style with time for classroom discussions. The second half of the semester has discussion groups. You will be expected to work for 2 hours outside of class each week, per University policy regarding work required for a 1 credit hour course.",
    "evaluation": "Grading is based on participating in debates and discussions, writing weekly essays, doing a service experience, and completing other occasional assignments.",
    "soc_comments": "Prereqs: Senior standing in CS, CSIS, or DSCI",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3930",
    "section": "Section A, CRN 92314",
    "title": "Computing Career Preparation",
    "credit_hours": "1",
    "meeting_info": "W 5:05pm-5:55pm in MORRILL HALL 010 (8/25 to 12/5)",
    "instructor": "Jillian Duprey",
    "description": "Seminar to help students develop necessary skills for becoming computing professionals and exposes them to different computing careers. Topics include job search strategies, preparation for technical interviews, networking, and developing soft skills. Several guest lectures by computing professionals and alumni. Prerequisite: CS 2240.",
    "soc_comments": "Prereqs enforced by the system: CS 2240",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3993",
    "section": "Section A, CRN 96402",
    "title": "IS:Intro to React",
    "credit_hours": "2",
    "meeting_info": "T 8:30am-9:20am in ON CAMPUS SEE NOTES (8/25 to 12/5)",
    "instructor": "Clayton Cafiero",
    "description": "A course which is tailored to fit the interests of a specific student, which occurs outside the traditional classroom/laboratory setting under the supervision of a faculty member, for which credit is awarded. Offered at department discretion.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3993",
    "section": "Section B, CRN 96455",
    "title": "IS: Bioinformatics",
    "credit_hours": "1 to 18",
    "instructor": "Laurent Hebert-Dufresne",
    "description": "A course which is tailored to fit the interests of a specific student, which occurs outside the traditional classroom/laboratory setting under the supervision of a faculty member, for which credit is awarded. Offered at department discretion.",
    "soc_comments": "This course is a tailored project for a specific student\nsupporting a bioinformatics project of the\nTranslational Global Infectious Diseases Research Center.\nCredits: 5-8",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3993",
    "section": "Section C, CRN 96485",
    "title": "IS:FullstackWebApplication Dev",
    "credit_hours": "3",
    "instructor": "Clayton Cafiero",
    "description": "A course which is tailored to fit the interests of a specific student, which occurs outside the traditional classroom/laboratory setting under the supervision of a faculty member, for which credit is awarded. Offered at department discretion.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 3994",
    "title": "Teaching Assistantship",
    "credit_hours": "1",
    "description": "Undergraduate student service as a teaching assistant, usually in an introductory-level course in the discipline, for which credit is awarded. Offered at department discretion.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 4996",
    "title": "Undergraduate Honors Thesis",
    "credit_hours": "3",
    "description": "College honors thesis or other department/program honors, under the supervision of a faculty member. Offered at department discretion. See description of Honors Thesis Program in the College of EM section of this catalog.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 5040",
    "section": "Section A, CRN 94078",
    "title": "Gr Database Systems",
    "credit_hours": "3",
    "meeting_info": "MWF 8:30am-9:20am in MARSH LIFE SCI 105 (8/25 to 12/5)",
    "instructor": "Byung Lee",
    "description": "Covers the theory and practice of database design and application programming, and basic internals of a database management system. Topics include database concepts, data models and database design, query languages, database programming concepts and languages, files and physical design, query processing and optimization, transaction concepts, concurrency control and recovery, and security and authentication. Credit not awarded for both CS 5040 and CS 3040. Prerequisites: Familiarity with basic data structures, algorithms, discrete mathematics, computer organization; Graduate student.",
    "section_description": "Theory and practice of database design and application programming, and basic internals of a database management system. Specific topics include database concepts, data models and database design, query languages, database programming concepts and languages, files and physical design, query processing and optimization, transaction concepts, concurrency control and recovery, and access control.",
    "section_expectations": "Lecture course. 6 to 8 hours of work expected outside the classroom.  Prerequisite: Familiarity with basic data structures, algorithms, discrete mathematics, and computer organization. Required text: Ramez Elmasri and Sham Navathe, Fundamentals of Database Systems (7th edition), Pearson, 2016.",
    "evaluation": "Weekly homework, including written and programming. Project. Class attendance.",
    "soc_comments": "Colocated with CS 3040 A;\nTotal combined enrollment: 45\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 5110",
    "section": "Section A, CRN 93798",
    "title": "Advanced Data Privacy",
    "credit_hours": "3",
    "meeting_info": "MWF 1:10pm-2pm in DEWEY HALL 314 (8/25 to 12/5)",
    "instructor": "Joseph Near",
    "description": "Explores the research field of data privacy, including privacy attacks on anonymized data, and formal approaches like k-Anonymity and differential privacy. Applies the theory of data privacy to real problems in programming projects. Prepares students to perform independent research in the field. Credit not awarded for both CS 5110 and CS 3110. Prerequisite: Graduate student.",
    "section_description": "How can we learn from sensitive data collected from individuals, while protecting the privacy of those individuals?\n\nThis question is central to the study of data privacy, and is increasingly relevant with the widespread collection of our personal data. Analysis of this data can lead to important benefits for society, including advances in medicine and public infrastructure, but can also result in privacy breaches that expose our most closely-held secrets.\n\nThis course will explore both threats to privacy and solutions to the data privacy problem. We will demonstrate that traditional approaches to protecting privacy, such as anonymization, are subject to powerful attacks that reveal individuals\u2019 sensitive data. We will see that while more recent approaches for protecting privacy, including k-anonymity and l-diversity, are more resistant to these attacks, they are not immune.\n\nThen, we will explore recent formal notions of privacy, including differential privacy. Differential privacy provides a rigorous formal definition of individual privacy that enables a wide range of statistical analyses while protecting privacy. We will explore a number of differentially private algorithms for analytics and machine learning, and learn about the algorithmic building blocks and proof techniques used to develop them.\n\nIn addition to learning about the mathematical foundations of differential privacy, we will explore its practical implications. We will learn about existing practical systems for enforcing differential privacy and examine the challenges of building such systems. This course will include programming assignments and an end-of-semester project, in which students are expected to demonstrate both mastery of the concepts we explore and understanding of their practical implications by building their own systems that perform privacy-preserving analyses on real data.",
    "section_expectations": "This course will be structured around lectures and a weekly programming assignment. Each lecture will cover concepts in ensuring data privacy; in the corresponding programming assignment, you will implement algorithms corresponding to these concepts. Students should expect to spend 5-6 hours per week outside of class on the weekly programming assignments. The required materials for this course are all freely available online.",
    "evaluation": "Your grade for the course will be determined as follows:\n\n    10 homework assignments (5% each; 50% total)\n    exams (20% total)\n    in-class exercises (20% total)\n    final project (10%)\n\nHomework Assignments\n\nThis course will use Python for examples and for programming assignments. Students are expected to be proficient in Python programming. Programming assignments will be distributed and turned in as Jupyter notebooks. See this page for information on installing Jupyter; the Anaconda method is recommended, since it also installs the other libraries we will use in the course.",
    "soc_comments": "Prereq: Graduate student;\nCo-located with CS 3110 A;\nTotal combined enrollment: 70\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 5240",
    "title": "Advanced Algorithm Design",
    "credit_hours": "3",
    "description": "Studies how to design and analyze computer program algorithms to solve real-world problems. Begins with a review of the concept of algorithm complexity and basic graph algorithms; and then covers algorithm design approaches such as greedy, divide and conquer, dynamic programming, and network flow; then, computational intractability will be treated. Credit not awarded for both CS 5240 and CS 3240. Prerequisite: Familiarity with data structures and elementary algorithms; Graduate student.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 5540",
    "section": "Section A, CRN 94180",
    "title": "Advanced Machine Learning",
    "credit_hours": "3",
    "meeting_info": "TTh 1:15pm-2:30pm in VOTEY BLDG 207 (8/25 to 12/5)",
    "instructor": "Safwan Wshah",
    "description": "Provides a broad introduction to machine learning and statistical pattern recognition. Topics include: supervised learning (linear regression, logistic regression, neural networks, support vector machines, decision tree, ensemble models, random forest); unsupervised learning (clustering, dimensionality reduction, kernel methods); Also introduces deep learning such as convolutional neural networks and discusses recent applications. Credit not awarded for both CS 5540 and CS 3540. Prerequisites: Knowledge of statistics as from STAT 2510, knowledge of linear algebra as from MATH 2522 or MATH 2544; Graduate student.",
    "section_description": "This course offers an introduction to advanced machine learning and statistical pattern recognition algorithms. It includes a wide array of topics, including supervised learning (covering linear regression, logistic regression, neural networks, support vector machines, decision trees, ensemble models, and random forests), as well as unsupervised learning (clustering, dimensionality reduction, and kernel methods). In addition, the course delves into the introduction of deep learning, featuring convolutional neural networks, and explores the latest applications of machine learning. You'll also gain valuable insights and guidance on effectively implementing machine learning algorithms.",
    "section_expectations": "Weekly assignments, Term Project and two Mid-term exams.",
    "evaluation": "\u2022 Assigned homework (25%)\n\u2022 Term Project (35%)\n\u2022 Mid term exams (30%). To exams will be given during the semester, no final exam.\n\u2022 Class attendance and participation (10%).",
    "soc_comments": "Prereqs enforced by the system:STAT 2510 & Math 2522 or 2544\nCo-located with CS 3540 A and CMPE 3990 A;\nCross-listed with CSYS 5990;\nTotal combined enrollment: 45;\nOpen to Degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 5870",
    "section": "Section A, CRN 93777",
    "title": "Data Science I - Experience",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm in INNOVATION HALL E432 (8/25 to 12/5)",
    "instructor": "Sam Zhang",
    "description": "Data harvesting, cleaning, and summarizing; working with non-traditional, non-numeric data (social network, natural language textual data, etc.); scientific visualization; advanced data pipelines with a practical focus on real datasets and developing good habits for rigorous and reproducible computational science; Project-based. Credit not awarded for both CS 5870 and CS 3870. Prerequisites: Knowledge of CS 1210 and either STAT 1410 or STAT 2430 required; knowledge of CS 2100 and MATH 2522 or MATH 2544 recommended; Graduate student or Instructor permission. Cross-listed with: STAT 5870, CSYS 5870.",
    "section_description": "Extracting meaning from data remains one of the most important tasks of science and industry. The Internet and modern computers have given us vast amounts of data, so it is more important than ever to understand how to collect, process, and analyze these data. A picture is worth a thousand words, so visualizations, from scientific plots and infographics to interactive data explorers, are crucial to summarize and communicate new discoveries.",
    "section_expectations": "Learning objectives In this course students will learn:\n1. basic data harvesting and storage with automated computer programs,\n2. data \u201cmunging\u201d or cleaning to process data,\n3. analyzing data with existing methods such as descriptive statistics and visualizations,\n4. developing new, problem-specific measures to explore trends and features in data, and \n5. communicating data-driven results.\n\nParticular emphasis will be placed on nontraditional (non-numeric) data such as networks, text corpora, etc. and on developing good habits for rigorous and reproducible computational science.\n\nProgramming This is a programming-intensive course taught using Python, and homework and projects will use Python (version 3). Python is very popular in industry and is free, easy to learn, and has many useful third-party packages. While you should have prior programming experience (such as UVM\u2019s CS021), experience with Python is not necessary. Early lectures include reviews of Python programming and how to set up your working environment.",
    "evaluation": "Grades 35% for homework, 15% for quizzes, 15% for each of two midterm projects, 20% for final project and presentation.",
    "soc_comments": "Prereqs:Graduate student or instructor permission;\nKnowledge of CS 1210 and either STAT 1410 or STAT 2430\nassumed; Knowledge of CS 2100 and MATH 2522 or MATH 2544\nstrongly recommended;\nCross-listed with CSYS / STAT 5870;\nTotal combined enrollment: 30\nOpen to degree and PACE students",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 5990",
    "section": "Section A, CRN 95644",
    "title": "Natural Language Processing",
    "credit_hours": "3",
    "meeting_info": "TTh 10:05am-11:20am in LAFAYETTE HALL L107 (8/25 to 12/5)",
    "instructor": "Juniper Lovato",
    "description": "See Schedule of Courses for specific titles. Subject will vary from year to year. May be repeated for credit with instructor permission.",
    "section_description": "This course provides a comprehensive, breadth-first introduction to natural language processing (NLP), an interdisciplinary field at the intersection of computer science, linguistics, and artificial intelligence. Students will explore both classical approaches and modern deep learning techniques, including large language models, through an integrative and hands-on learning experience. The course is project-based, emphasizing practical engagement with real-world textual datasets and the development of strong research practices for rigorous research projects. Prerequisites: Junior standing and programming experience in Python, or instructor permission. Cross-listed with CSYS 5990 B.",
    "section_expectations": "This course will be structured around lectures, weekly assignments, and a final project. Each lecture will introduce key concepts in natural language processing, and the corresponding assignments and the final project will involve implementing these concepts.",
    "evaluation": "Grades will be determined as follows:\nHomework assignments (30% total)\nExams (30% total)\nClass participation (10% total)\nFinal project (30%)\n\nHomework Assignments: This course will use Python for in-class demonstrations, final projects, and programming assignments. Students are expected to be proficient in Python programming for this course. Programming assignments are required to be submitted using Jupyter notebooks.",
    "soc_comments": "Junior standing and programming experience in python;\nor instructor permission; Cross-listed with CSYS 5990 B;\nTotal combined enrollment: 30",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6020",
    "section": "Section A, CRN 92171",
    "title": "Modeling Complex Systems I",
    "credit_hours": "3",
    "meeting_info": "TTh 2:50pm-4:05pm in VOTEY BLDG 209 (8/25 to 12/5)",
    "instructor": "Laurent Hebert-Dufresne",
    "description": "Integrative breadth-first introduction to computational methods for modeling complex systems; dynamical systems, numerical methods, cellular automata, agent-based computing, game theory, genetic algorithms, artificial neural networks, and complex networks. Semester team-based project. Pre/Co-requisites: Computer programming in any language, calculus; linear algebra recommended. Cross-listed with: CSYS 6020.",
    "section_description": "Integrative breadth-first introduction to computational methods for modeling complex systems; dynamical systems, numerical methods, cellular automata, complex networks, game theory and agent-based models. Prerequisite: Graduate standing, computer programming in python, basic calculus, and statistics are required, linear algebra recommended.",
    "section_expectations": "This course combines lecture and discussion formats along with recorded supporting material. On top of occasional assignments in the first half of the course, students should expect weekly readings outside of class, with additional time for a final team project. We use the following textbook as complementary text: \"Introduction to the Modeling and Analysis of Complex Systems\" by Hiroki Sayama.",
    "evaluation": "Grades are based on class participation, biweekly assignments over the first half of the semester, weekly quizzes on readings, and a final team project.",
    "soc_comments": "Graduate standing only;\nOpen to Degree and PACE students;\nCross listed with CSYS 6020 A;\nTotal combined enrollment: 45",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6391",
    "title": "Master's Thesis Research",
    "credit_hours": "Varies by section",
    "description": "Research for the Master's Thesis.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6392",
    "section": "Section A, CRN 96281",
    "title": "Master's Project Research",
    "credit_hours": "3",
    "instructor": "David Jangraw",
    "description": "Research for Master's project. Prerequisite: Department permission.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6392",
    "section": "Section B, CRN 96482",
    "title": "GPU-Accelerated RGs",
    "credit_hours": "3",
    "instructor": "Jason Hibbeler",
    "description": "Research for Master's project. Prerequisite: Department permission.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6392",
    "section": "Section OL1, CRN 96297",
    "title": "Master's Project Research",
    "credit_hours": "3",
    "instructor": "Joshua Bongard",
    "description": "Research for Master's project. Prerequisite: Department permission.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6990",
    "section": "Section A, CRN 95645",
    "title": "Mind, Morphology, and Machine",
    "credit_hours": "3",
    "meeting_info": "MW 8am-9:15am in LAFAYETTE HALL L411 (8/25 to 12/5)",
    "instructor": "Joshua Bongard",
    "description": "Subject will vary from year to year. May be repeated for credit with Instructor permission.",
    "soc_comments": "Cross-listed with CSYS 6990 A; Total combined enrollment: 15",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6990",
    "section": "Section B, CRN 95647",
    "title": "Computer Security Foundations",
    "credit_hours": "3",
    "meeting_info": "TTh 4:25pm-5:40pm in VOTEY BLDG 305 (8/25 to 12/5)",
    "instructor": "Chris Skalka",
    "description": "Subject will vary from year to year. May be repeated for credit with Instructor permission.",
    "section_description": "In this course we will study mathematical foundations of computer security. We will consider the CIA triad- Confidentiality, Integrity, and Availability- from a formal perspective, and how these can be precisely defined and characterized in systems. We will focus especially on Information Flow theory and associated mitigation methods.",
    "section_expectations": "Recommended prerequisites are background in data structures and algorithms (similar to CS2240), theory of computation (similar to CS2250), and ideally some background in programming languages design (similar to CS3250).",
    "evaluation": "Homework for the course will be written assignments, that will generally be distributed every 10 to 14 days. All homework solutions are expected to be an original, individual effort. The class will include a Midterm and Final Exam.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 6993",
    "section": "Section A, CRN 96345",
    "title": "IS:MechanisticInterpretability",
    "credit_hours": "3",
    "meeting_info": "F 12pm-12:50pm in ON CAMPUS SEE NOTES (8/25 to 12/5)",
    "instructor": "Juniper Lovato",
    "description": "A course which is tailored to fit the interests of a specific student, which occurs outside the traditional classroom/laboratory setting under the supervision of a faculty member, for which credit is awarded. Offered at department discretion. Prerequisite: Instructor permission.",
    "semester": "Fall 2025"
  },
  {
    "course_code": "CS 7491",
    "title": "Doctoral Dissertation Research",
    "credit_hours": "Varies by section",
    "description": "Research for the Doctoral Dissertation.",
    "soc_comments": "Varies by section",
    "semester": "Fall 2025"
  }
]